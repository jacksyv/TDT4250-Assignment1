/**
 */
package study.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import study.Program;
import study.Specialisation;
import study.SpecialisationAllocation;
import study.StudyPackage;
import study.StudyPlan;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Specialisation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link study.impl.SpecialisationImpl#getName <em>Name</em>}</li>
 *   <li>{@link study.impl.SpecialisationImpl#getSpecialisationAllocations <em>Specialisation Allocations</em>}</li>
 *   <li>{@link study.impl.SpecialisationImpl#getProgram <em>Program</em>}</li>
 *   <li>{@link study.impl.SpecialisationImpl#getRequirement <em>Requirement</em>}</li>
 *   <li>{@link study.impl.SpecialisationImpl#getStudyplan <em>Studyplan</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SpecialisationImpl extends MinimalEObjectImpl.Container implements Specialisation {
	/**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The cached value of the '{@link #getSpecialisationAllocations() <em>Specialisation Allocations</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSpecialisationAllocations()
	 * @generated
	 * @ordered
	 */
	protected SpecialisationAllocation specialisationAllocations;

	/**
	 * The cached value of the '{@link #getProgram() <em>Program</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getProgram()
	 * @generated
	 * @ordered
	 */
	protected Program program;

	/**
	 * The default value of the '{@link #getRequirement() <em>Requirement</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getRequirement()
	 * @generated
	 * @ordered
	 */
	protected static final String REQUIREMENT_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getRequirement() <em>Requirement</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getRequirement()
	 * @generated
	 * @ordered
	 */
	protected String requirement = REQUIREMENT_EDEFAULT;

	/**
	 * The cached value of the '{@link #getStudyplan() <em>Studyplan</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getStudyplan()
	 * @generated
	 * @ordered
	 */
	protected StudyPlan studyplan;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecialisationImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return StudyPackage.Literals.SPECIALISATION;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, StudyPackage.SPECIALISATION__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public SpecialisationAllocation getSpecialisationAllocations() {
		if (specialisationAllocations != null && specialisationAllocations.eIsProxy()) {
			InternalEObject oldSpecialisationAllocations = (InternalEObject)specialisationAllocations;
			specialisationAllocations = (SpecialisationAllocation)eResolveProxy(oldSpecialisationAllocations);
			if (specialisationAllocations != oldSpecialisationAllocations) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, StudyPackage.SPECIALISATION__SPECIALISATION_ALLOCATIONS, oldSpecialisationAllocations, specialisationAllocations));
			}
		}
		return specialisationAllocations;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SpecialisationAllocation basicGetSpecialisationAllocations() {
		return specialisationAllocations;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetSpecialisationAllocations(SpecialisationAllocation newSpecialisationAllocations, NotificationChain msgs) {
		SpecialisationAllocation oldSpecialisationAllocations = specialisationAllocations;
		specialisationAllocations = newSpecialisationAllocations;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, StudyPackage.SPECIALISATION__SPECIALISATION_ALLOCATIONS, oldSpecialisationAllocations, newSpecialisationAllocations);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setSpecialisationAllocations(SpecialisationAllocation newSpecialisationAllocations) {
		if (newSpecialisationAllocations != specialisationAllocations) {
			NotificationChain msgs = null;
			if (specialisationAllocations != null)
				msgs = ((InternalEObject)specialisationAllocations).eInverseRemove(this, StudyPackage.SPECIALISATION_ALLOCATION__SPECIALISATION, SpecialisationAllocation.class, msgs);
			if (newSpecialisationAllocations != null)
				msgs = ((InternalEObject)newSpecialisationAllocations).eInverseAdd(this, StudyPackage.SPECIALISATION_ALLOCATION__SPECIALISATION, SpecialisationAllocation.class, msgs);
			msgs = basicSetSpecialisationAllocations(newSpecialisationAllocations, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, StudyPackage.SPECIALISATION__SPECIALISATION_ALLOCATIONS, newSpecialisationAllocations, newSpecialisationAllocations));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Program getProgram() {
		if (program != null && program.eIsProxy()) {
			InternalEObject oldProgram = (InternalEObject)program;
			program = (Program)eResolveProxy(oldProgram);
			if (program != oldProgram) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, StudyPackage.SPECIALISATION__PROGRAM, oldProgram, program));
			}
		}
		return program;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Program basicGetProgram() {
		return program;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setProgram(Program newProgram) {
		Program oldProgram = program;
		program = newProgram;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, StudyPackage.SPECIALISATION__PROGRAM, oldProgram, program));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getRequirement() {
		return requirement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setRequirement(String newRequirement) {
		String oldRequirement = requirement;
		requirement = newRequirement;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, StudyPackage.SPECIALISATION__REQUIREMENT, oldRequirement, requirement));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public StudyPlan getStudyplan() {
		if (studyplan != null && studyplan.eIsProxy()) {
			InternalEObject oldStudyplan = (InternalEObject)studyplan;
			studyplan = (StudyPlan)eResolveProxy(oldStudyplan);
			if (studyplan != oldStudyplan) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, StudyPackage.SPECIALISATION__STUDYPLAN, oldStudyplan, studyplan));
			}
		}
		return studyplan;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StudyPlan basicGetStudyplan() {
		return studyplan;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setStudyplan(StudyPlan newStudyplan) {
		StudyPlan oldStudyplan = studyplan;
		studyplan = newStudyplan;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, StudyPackage.SPECIALISATION__STUDYPLAN, oldStudyplan, studyplan));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case StudyPackage.SPECIALISATION__SPECIALISATION_ALLOCATIONS:
				if (specialisationAllocations != null)
					msgs = ((InternalEObject)specialisationAllocations).eInverseRemove(this, StudyPackage.SPECIALISATION_ALLOCATION__SPECIALISATION, SpecialisationAllocation.class, msgs);
				return basicSetSpecialisationAllocations((SpecialisationAllocation)otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case StudyPackage.SPECIALISATION__SPECIALISATION_ALLOCATIONS:
				return basicSetSpecialisationAllocations(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case StudyPackage.SPECIALISATION__NAME:
				return getName();
			case StudyPackage.SPECIALISATION__SPECIALISATION_ALLOCATIONS:
				if (resolve) return getSpecialisationAllocations();
				return basicGetSpecialisationAllocations();
			case StudyPackage.SPECIALISATION__PROGRAM:
				if (resolve) return getProgram();
				return basicGetProgram();
			case StudyPackage.SPECIALISATION__REQUIREMENT:
				return getRequirement();
			case StudyPackage.SPECIALISATION__STUDYPLAN:
				if (resolve) return getStudyplan();
				return basicGetStudyplan();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case StudyPackage.SPECIALISATION__NAME:
				setName((String)newValue);
				return;
			case StudyPackage.SPECIALISATION__SPECIALISATION_ALLOCATIONS:
				setSpecialisationAllocations((SpecialisationAllocation)newValue);
				return;
			case StudyPackage.SPECIALISATION__PROGRAM:
				setProgram((Program)newValue);
				return;
			case StudyPackage.SPECIALISATION__REQUIREMENT:
				setRequirement((String)newValue);
				return;
			case StudyPackage.SPECIALISATION__STUDYPLAN:
				setStudyplan((StudyPlan)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case StudyPackage.SPECIALISATION__NAME:
				setName(NAME_EDEFAULT);
				return;
			case StudyPackage.SPECIALISATION__SPECIALISATION_ALLOCATIONS:
				setSpecialisationAllocations((SpecialisationAllocation)null);
				return;
			case StudyPackage.SPECIALISATION__PROGRAM:
				setProgram((Program)null);
				return;
			case StudyPackage.SPECIALISATION__REQUIREMENT:
				setRequirement(REQUIREMENT_EDEFAULT);
				return;
			case StudyPackage.SPECIALISATION__STUDYPLAN:
				setStudyplan((StudyPlan)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case StudyPackage.SPECIALISATION__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case StudyPackage.SPECIALISATION__SPECIALISATION_ALLOCATIONS:
				return specialisationAllocations != null;
			case StudyPackage.SPECIALISATION__PROGRAM:
				return program != null;
			case StudyPackage.SPECIALISATION__REQUIREMENT:
				return REQUIREMENT_EDEFAULT == null ? requirement != null : !REQUIREMENT_EDEFAULT.equals(requirement);
			case StudyPackage.SPECIALISATION__STUDYPLAN:
				return studyplan != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(", requirement: ");
		result.append(requirement);
		result.append(')');
		return result.toString();
	}

} //SpecialisationImpl
